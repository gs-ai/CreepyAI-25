#!/usr/bin/env python3
"""
Fix Import Statements in CreepyAI Files

This script fixes common import issues in Python files
"""
import os
import re
import sys
import logging
import shutil

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='fix_imports.log'
)
logger = logging.getLogger('Fix Imports')

# Add project directories to path
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

def fix_file_imports(filepath):
    """Fix import statements in a file"""
    if not os.path.exists(filepath):
        print(f"File not found: {filepath}")
        return False
        
    # Create a backup
    backup_file = filepath + '.import_backup'
    try:
        shutil.copy2(filepath, backup_file)
        print(f"Created backup at {backup_file}")
    except Exception as e:
        logger.error(f"Error creating backup: {e}")
        print(f"Warning: Could not create backup: {e}")
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Analyze imports
        import_pyqt_core = re.search(r'from PyQt5.QtCore import .*', content)
        has_qobject = 'QObject' in content and re.search(r'from PyQt5.QtCore import .*QObject', content) is not None
        has_pyqtsignal = 'pyqtSignal' in content and re.search(r'from PyQt5.QtCore import .*pyqtSignal', content) is not None
        
        # Check for missing QObject
        if 'class LocationsList(QObject)' in content and not has_qobject:
            print("QObject is used but not imported. Adding import...")
            
            if import_pyqt_core:
                # Modify existing PyQt5.QtCore import
                updated_import = import_pyqt_core.group(0)
                if 'QObject' not in updated_import:
                    updated_import = updated_import.rstrip(')') + ', QObject)'
                
                content = content.replace(import_pyqt_core.group(0), updated_import)
            else:
                # Add new import
                content = "from PyQt5.QtCore import QObject\n" + content
        
        # Check for missing pyqtSignal 
        if 'pyqtSignal' in content and not has_pyqtsignal:
            print("pyqtSignal is used but not imported. Adding import...")
            
            if import_pyqt_core:
                # Modify existing PyQt5.QtCore import
                updated_import = import_pyqt_core.group(0)
                if 'pyqtSignal' not in updated_import:
                    updated_import = updated_import.rstrip(')') + ', pyqtSignal)'
                    
                content = content.replace(import_pyqt_core.group(0), updated_import)
            else:
                # Add new import
                content = "from PyQt5.QtCore import pyqtSignal\n" + content
        
        # Check for missing json import
        if 'json.dump(' in content or 'json.dumps(' in content or 'json.loads(' in content:
            if 'import json' not in content and 'from json import' not in content:
                print("JSON is used but not imported. Adding import...")
                content = "import json\n" + content
                
        # Check for missing os import
        if 'os.path' in content:
            if 'import os' not in content and 'from os import' not in content:
                print("OS is used but not imported. Adding import...")
                content = "import os\n" + content
                
        # Remove creepy. prefixes in imports
        if 'from creepy.' in content:
            print("Replacing 'from creepy.' imports with direct imports...")
            content = re.sub(r'from creepy\.(\w+)', r'from \1', content)
        
        if 'import creepy.' in content:
            print("Replacing 'import creepy.' imports with direct imports...")
            content = re.sub(r'import creepy\.(\w+)', r'import \1', content)
            
        # Write fixed content
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
            
        print(f"Fixed imports in {os.path.basename(filepath)}")
        return True
    
    except Exception as e:
        logger.error(f"Error fixing imports in {filepath}: {e}")
        print(f"Error fixing imports in {filepath}: {e}")
        return False

def fix_specific_file(filepath):
    """Fix specific known files"""
    filename = os.path.basename(filepath)
    
    if filename == 'LocationsList.py':
        print(f"Applying special fix for {filename}...")
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Fix QObject import
        if 'class LocationsList(QObject)' in content and 'from PyQt5.QtCore import QObject' not in content:
            original_import = re.search(r'from PyQt5.QtCore import .*', content)
            if original_import:
                new_import = original_import.group(0).rstrip(')') + ', QObject)'
                content = content.replace(original_import.group(0), new_import)
            else:
                content = "from PyQt5.QtCore import QObject, pyqtSignal\n" + content
            
            print("Fixed QObject import")
            
        # Fix pyqtSignal
        if 'pyqtSignal' in content and 'from PyQt5.QtCore import' in content and 'pyqtSignal' not in content.split('from PyQt5.QtCore import')[1].split('\n')[0]:
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if 'from PyQt5.QtCore import' in line and 'pyqtSignal' not in line:
                    if line.endswith(')'):
                        lines[i] = line[:-1] + ', pyqtSignal)'
                    else:
                        lines[i] = line + ', pyqtSignal'
                    break
            
            content = '\n'.join(lines)
            print("Fixed pyqtSignal import")
            
        # Write back the content
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True
    
    return fix_file_imports(filepath)

def main():
    """Main function"""
    if len(sys.argv) > 1:
        # Fix specific file
        filepath = sys.argv[1]
        if not os.path.isabs(filepath):
            filepath = os.path.join(BASE_DIR, filepath)
            
        if os.path.exists(filepath):
            fix_specific_file(filepath)
        else:
            print(f"File not found: {filepath}")
    else:
        # Fix common problematic files
        print("Fixing common problematic files...")
        
        # Fix LocationsList.py
        locations_file = os.path.join(BASE_DIR, 'models', 'LocationsList.py')
        if os.path.exists(locations_file):
            fix_specific_file(locations_file)
        else:
            print(f"File not found: {locations_file}")
        
        # Fix creepy_map_view.py
        mapview_file = os.path.join(BASE_DIR, 'ui', 'creepy_map_view.py')
        if os.path.exists(mapview_file):
            fix_file_imports(mapview_file)
        else:
            print(f"File not found: {mapview_file}")
        
        # Fix other Python files with creepy. imports
        print("Checking other Python files for creepy. imports...")
        for root, _, files in os.walk(BASE_DIR):
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()
                            
                        if 'from creepy.' in content or 'import creepy.' in content:
                            print(f"Fixing imports in {os.path.relpath(filepath, BASE_DIR)}...")
                            fix_file_imports(filepath)
                    except Exception as e:
                        logger.error(f"Error checking {filepath}: {e}")

if __name__ == "__main__":
    main()
